"use strict";

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _es6PromisePool = _interopRequireDefault(require("es6-promise-pool"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const BASE_SENTRY_URL = 'https://sentry.io/api/0';
const DEFAULT_INCLUDE = /\.js$|\.map$/;

const DEFAULT_TRANSFORM = filename => `~/${filename}`;

const DEFAULT_DELETE_REGEX = /\.map$/;

const DEFAULT_BODY_TRANSFORM = (version, projects) => ({
  version,
  projects
});

const DEFAULT_UPLOAD_FILES_CONCURRENCY = Infinity;
module.exports = class SentryPlugin {
  constructor(options) {
    // The baseSentryURL option was previously documented to have
    // `/projects` on the end. We now expect the basic API endpoint
    // but remove any `/projects` suffix for backwards compatibility.
    const projectsRegex = /\/projects$/;

    if (options.baseSentryURL) {
      if (projectsRegex.test(options.baseSentryURL)) {
        // eslint-disable-next-line no-console
        console.warn("baseSentryURL with '/projects' suffix is deprecated; " + 'see https://github.com/40thieves/webpack-sentry-plugin/issues/38');
        this.baseSentryURL = options.baseSentryURL.replace(projectsRegex, '');
      } else {
        this.baseSentryURL = options.baseSentryURL;
      }
    } else {
      this.baseSentryURL = BASE_SENTRY_URL;
    }

    this.organizationSlug = options.organization || options.organisation;
    this.projectSlug = options.project;

    if (typeof this.projectSlug === 'string') {
      this.projectSlug = [this.projectSlug];
    }

    this.apiKey = options.apiKey;
    this.releaseBody = options.releaseBody || DEFAULT_BODY_TRANSFORM;
    this.releaseVersion = options.release;
    this.include = options.include || DEFAULT_INCLUDE;
    this.exclude = options.exclude;
    this.filenameTransform = options.filenameTransform || DEFAULT_TRANSFORM;
    this.suppressErrors = options.suppressErrors;
    this.suppressConflictError = options.suppressConflictError;
    this.createReleaseRequestOptions = options.createReleaseRequestOptions || options.requestOptions || {};

    if (typeof this.createReleaseRequestOptions === 'object') {
      const createReleaseRequestOptions = this.createReleaseRequestOptions;

      this.createReleaseRequestOptions = () => createReleaseRequestOptions;
    }

    this.uploadFileRequestOptions = options.uploadFileRequestOptions || options.requestOptions || {};

    if (typeof this.uploadFileRequestOptions === 'object') {
      const uploadFileRequestOptions = this.uploadFileRequestOptions;

      this.uploadFileRequestOptions = () => uploadFileRequestOptions;
    }

    if (options.requestOptions) {
      // eslint-disable-next-line no-console
      console.warn('requestOptions is deprecated. ' + 'use createReleaseRequestOptions and ' + 'uploadFileRequestOptions instead; ' + 'see https://github.com/40thieves/webpack-sentry-plugin/pull/43');
    }

    this.deleteAfterCompile = options.deleteAfterCompile;
    this.deleteRegex = options.deleteRegex || DEFAULT_DELETE_REGEX;
    this.uploadFilesConcurrency = options.uploadFilesConcurrency || DEFAULT_UPLOAD_FILES_CONCURRENCY;
  }

  apply(compiler) {
    var _this = this;

    compiler.hooks.afterEmit.tapPromise('SentryPlugin',
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(function* (compilation) {
        const errors = _this.ensureRequiredOptions();

        if (errors) {
          _this.handleErrors(errors, compilation);

          return;
        }

        const files = _this.getFiles(compilation);

        if (typeof _this.releaseVersion === 'function') {
          _this.releaseVersion = _this.releaseVersion(compilation.hash);
        }

        if (typeof _this.releaseBody === 'function') {
          _this.releaseBody = _this.releaseBody(_this.releaseVersion, _this.projectSlug);
        }

        try {
          yield _this.createRelease();
          yield _this.uploadFiles(files);
        } catch (error) {
          _this.handleErrors(error, compilation);
        }
      });

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    compiler.hooks.done.tapPromise('SentryPlugin',
    /*#__PURE__*/
    function () {
      var _ref2 = _asyncToGenerator(function* (stats) {
        if (_this.deleteAfterCompile) {
          yield _this.deleteFiles(stats);
        }
      });

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
  }

  handleErrors(err, compilation) {
    const errorMsg = `Sentry Plugin: ${err}`;

    if (this.suppressErrors || this.suppressConflictError && err.statusCode === 409) {
      compilation.warnings.push(errorMsg);
    } else {
      compilation.errors.push(errorMsg);
    }
  }

  ensureRequiredOptions() {
    if (!this.organizationSlug) {
      return new Error('Must provide organization');
    } else if (!this.projectSlug) {
      return new Error('Must provide project');
    } else if (!this.apiKey) {
      return new Error('Must provide api key');
    } else if (!this.releaseVersion) {
      return new Error('Must provide release version');
    } else {
      return null;
    }
  } // eslint-disable-next-line class-methods-use-this


  getAssetPath(compilation, name) {
    return _path.default.join(compilation.getPath(compilation.compiler.outputPath), name.split('?')[0]);
  }

  getFiles(compilation) {
    return Object.keys(compilation.assets).map(name => {
      if (this.isIncludeOrExclude(name)) {
        return {
          name,
          filePath: this.getAssetPath(compilation, name)
        };
      }

      return null;
    }).filter(i => i);
  }

  isIncludeOrExclude(filename) {
    const isIncluded = this.include ? this.include.test(filename) : true;
    const isExcluded = this.exclude ? this.exclude.test(filename) : false;
    return isIncluded && !isExcluded;
  } // eslint-disable-next-line class-methods-use-this


  combineRequestOptions(req, requestOptionsFunc) {
    const requestOptions = requestOptionsFunc(req);
    const combined = Object.assign({}, requestOptions, req);

    if (requestOptions.headers) {
      Object.assign(combined.headers, requestOptions.headers, req.headers);
    }

    if (requestOptions.auth) {
      Object.assign(combined.auth, requestOptions.auth, req.auth);
    }
    console.log(combined)
    return combined;
  }

  createRelease() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      console.log(`${_this2.sentryReleaseUrl()}/`)
      yield (0, _requestPromise.default)(_this2.combineRequestOptions({
        url: `${_this2.sentryReleaseUrl()}/`,
        method: 'POST',
        auth: {
          bearer: _this2.apiKey
        },
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(_this2.releaseBody)
      }, _this2.createReleaseRequestOptions));
    })();
  }

  uploadFiles(files) {
    const pool = new _es6PromisePool.default(() => {
      const file = files.pop();

      if (!file) {
        return null;
      }

      return this.uploadFile(file);
    }, this.uploadFilesConcurrency);
    return pool.start();
  }

  uploadFile({
    filePath,
    name
  }) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      console.log(`${_this3.sentryReleaseUrl()}/${_this3.releaseVersion}/files/`);
      yield (0, _requestPromise.default)(_this3.combineRequestOptions({
        url: `${_this3.sentryReleaseUrl()}/${_this3.releaseVersion}/files/`,
        method: 'POST',
        auth: {
          bearer: _this3.apiKey
        },
        headers: {},
        formData: {
          file: _fs.default.createReadStream(filePath),
          name: _this3.filenameTransform(name)
        }
      }, _this3.uploadFileRequestOptions));
    })();
  }

  sentryReleaseUrl() {
    return `${this.baseSentryURL}/organizations/${this.organizationSlug}/releases`;
  }

  deleteFiles(stats) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      Object.keys(stats.compilation.assets).filter(name => _this4.deleteRegex.test(name)).forEach(name => {
        const filePath = _this4.getAssetPath(stats.compilation, name);

        if (filePath) {
          _fs.default.unlinkSync(filePath);
        } else {
          // eslint-disable-next-line no-console
          console.warn(`WebpackSentryPlugin: unable to delete '${name}'. ` + 'File does not exist; it may not have been created ' + 'due to a build error.');
        }
      });
    })();
  }

};